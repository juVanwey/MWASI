model Donation {
  id     Int      @id @default(autoincrement())
  amount Float
  date   DateTime @default(now())
  email  String
  user   User     @relation(fields: [userId], references: [id])
  userId Int
}

model Event {
  // ---------------------------------
  // Champs simples
  // ---------------------------------
  id          Int      @id @default(autoincrement()) // Identifiant unique auto-incrémenté
  title       String // Titre de l'événement
  description String // Description détaillée
  date        DateTime // Date et heure de l'événement
  location    String // Lieu de l'événement
  createdAt   DateTime @default(now()) // Date de création automatique

  // ---------------------------------
  // Relations 1-à-n
  // ---------------------------------
  createdBy   User @relation("CreatedEvents", fields: [createdById], references: [id]) // Créateur (admin/organisateur)
  createdById Int // Clé étrangère vers User

  volunteerAssignments VolunteerAssignment[] // Feuilles de route pour bénévoles
  registrations        Registration[] // Inscriptions à l'événement

  // ---------------------------------
  // Relations n-à-n
  // ---------------------------------
  volunteers User[] @relation("VolunteerUsers") // Utilisateurs bénévoles assignés à l'événement
  employees  User[] @relation("EmployeeUsers") // Utilisateurs professionnels assignés

  thematics Thematic[] @relation("EventThematics") // Thématiques associées

  // ---------------------------------
  // Relation optionnelle 1-à-1
  // ---------------------------------
  mediaFeedback MediaFeedback? // Retour média lié à l'événement (optionnel)
}

model InterventionProposal {
  id          Int            @id @default(autoincrement())
  jobTitle    String
  description String
  domain      Domain
  status      ProposalStatus @default(PENDING)
  createdAt   DateTime       @default(now())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Domain {
  IT
  MARKETING
  DESIGN
  EDUCATION
  HEALTH
  OTHER
}

model MediaFeedback {
  id           Int     @id @default(autoincrement())
  mediaGallery String // pour stocker par exemple une URL ou un chemin vers la galerie média
  caption      String?
  eventId      Int     @unique
  event        Event   @relation(fields: [eventId], references: [id])
}

// model MediaFeedback {
//   id           Int       @id @default(autoincrement())
//   mediaGallery String    // URL ou chemin unique (peut être JSON si plusieurs médias)
//   caption      String?
//   mediaType    MediaType? // enum à définir si besoin
//   createdAt    DateTime  @default(now())
//   eventId      Int
//   event        Event     @relation(fields: [eventId], references: [id])
//   userId       Int?      // optionnel si tu veux garder trace de qui a posté
//   user         User?     @relation(fields: [userId], references: [id])
// }

// enum MediaType {
//   IMAGE
//   VIDEO
//   AUDIO
//   OTHER
// }

model Registration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int
}

model Resource {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  type        ResourceType
  //   language    String
  linkOrFile  String
  createdAt   DateTime     @default(now())

  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int
}

enum ResourceType {
  ARTICLE
  GUIDE
  RECOMMENDATION
  PORTRAIT
}

model Testimonial {
  id         Int      @id @default(autoincrement())
  content    String
  authorName String
  createdAt  DateTime @default(now())

  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int
}

model Thematic {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  events Event[] @relation("EventThematics")
}

model User {
  // ---------------------------------
  // Champs simples
  // ---------------------------------
  id                     Int         @id @default(autoincrement()) // Identifiant unique auto-incrémenté
  firstName              String // Prénom
  lastName               String // Nom
  email                  String      @unique // Email unique pour login
  password               String? // Mot de passe (optionnel)
  status                 UserStatus? // Statut (admin, visiteur, bénévole, membre, pro)
  isNewsletterSubscriber Boolean     @default(false) // Abonné à la newsletter (false par défaut)
  createdAt              DateTime    @default(now()) // Date de création du compte

  // ---------------------------------
  // Relations 1-à-1
  // ---------------------------------
  volunteerApplication VolunteerApplication? // Candidature bénévole associée (max 1)
  interventionProposal InterventionProposal? // Proposition intervention pro (max 1)

  // ---------------------------------
  // Relations 1-à-n
  // ---------------------------------
  registrations        Registration[] // Inscriptions aux événements (0-n)
  createdEvents        Event[]               @relation("CreatedEvents") // Événements créés (par exemple par un admin)
  resources            Resource[] // Ressources publiées
  testimonials         Testimonial[] // Témoignages laissés
  donations            Donation[] // Dons effectués
  volunteerAssignments VolunteerAssignment[] // Affectations bénévoles (0-n)

  // ---------------------------------
  // Relations n-à-n
  // ---------------------------------
  volunteerInEvents Event[] @relation("VolunteerUsers") // Événements où user est bénévole
  employeeInEvents  Event[] @relation("EmployeeUsers") // Événements où user est pro
}

enum UserStatus {
  ADMIN
  VISITOR
  VOLUNTEER
  MEMBER
  PROFESSIONAL
}

model VolunteerApplication {
  id           Int               @id @default(autoincrement())
  desiredRoles String // On garde String, texte libre pour les rôles souhaités
  motivation   String
  status       ApplicationStatus @default(PENDING)
  notes        String? // Optionnel, les notes laissées par l’admin
  createdAt    DateTime          @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model VolunteerAssignment {
  id        Int           @id @default(autoincrement())
  role      VolunteerRole
  tasks     String?
  //   status      AssignmentStatus  @default(ASSIGNED)
  notes     String?
  createdAt DateTime      @default(now())

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

enum VolunteerRole {
  ACCUEIL
  LOGISTIQUE
  SOUTIEN
  COMMUNICATION
  AUTRE
}

enum AssignmentStatus {
  ASSIGNED
  COMPLETED
  CANCELLED
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
